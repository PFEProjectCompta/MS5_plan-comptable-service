type Query{
# Query for "CompteGeneral"
    compteGeneralList:[CompteGeneral]
    compteGeneralById(id:String):CompteGeneral
    planComptableByCompteGeneralId(id:String):[PlanComptableElement]
# Query for "PlanComptableElement"
    planComptableElementList:[PlanComptableElement]
    planComptableElementById(id:String):PlanComptableElement
# Query "Societe"
    allSocieteKafka:[SocieteDTOKafka]
}
type Mutation{
# Mutation for "CompteGeneral"
    ajouterCompteGeneral(compteGeneralDTO:CompteGeneralDTO):CompteGeneral
    modifierCompteGeneral(compteGeneralDTO:CompteGeneralDTO,id:String):CompteGeneral
    supprimerCompteGeneral(id:String):CompteGeneral
# Mutation for "PlanComptableElement"
    ajouterplanComptableElement(planComptableElementDTO:PlanComptableElementDTO):PlanComptableElement
    modifierplanComptableElement(planComptableElementDTO:PlanComptableElementDTO,id:String):PlanComptableElement
    supprimerplanComptableElement(id:String):PlanComptableElement
}
type CompteGeneral{
    id :String,
    natureCompte :String ,
    debutFaurchette: String ,
    finFaurchette :String
}
input CompteGeneralDTO{
    natureCompte :String ,
    debutFaurchette: String ,
    finFaurchette :String
}

type PlanComptableElement{
    id :String ,
    numeroCompte: String ,
    intitule: String ,
    reporter: Boolean,
    compteGeneral: CompteGeneral,
    societeId:String
}
input PlanComptableElementDTO{
    numeroCompte: String ,
    intitule: String ,
    reporter: Boolean ,
    compteGeneralId: String ,
    societeId:String
}

type SocieteDTOKafka{
    id :String ,
    raison_social: String ,
    activite :String ,
    adresse: String,
    compteUtilisateurId: String
}